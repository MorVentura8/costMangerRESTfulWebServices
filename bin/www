#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const debug = require('debug')('costmangerrestfulwebservices:server');
const mongoose = require('mongoose');      // ← נשתמש כדי לבדוק מצב חיבור
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Start listening only after MongoDB connection is open.
 */
function startListening() {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

if (mongoose.connection.readyState === 1) {
  // כבר מחובר
  startListening();
} else {
  // נחכה לחיבור
  mongoose.connection.once('open', startListening);
  mongoose.connection.on('error', (err) => {
    console.error('❌ MongoDB connection error:', err.message);
    process.exit(1);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const p = parseInt(val, 10);
  if (Number.isNaN(p)) return val;   // named pipe
  if (p >= 0) return p;              // port number
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
